
allowedSqlState.db2.alreadyExists=42710
allowedSqlState.derby.tableExists=X0Y32
allowedSqlState.derby.integrityConstraintViolation=23505
allowedSqlState.derby.functionExists=X0Y68

repositoryDefinition.createEntityTable:
	create table entity
	(
	    id bigint generated by default as identity (start with 1, increment by 1) not null,
	    type smallint not null,
	    name varchar({{MAX_NAME_LENGTH}}),
	    parent_entity_id bigint references entity(id) on delete cascade,
	    created_by bigint references entity(id) on delete cascade,
	    created_at bigint,
	    published_at bigint,
	    primary key(id),
	    unique(type, name)
	)
	
repositoryDefinition.initializeEntityTable:
	insert into entity
	(
		id,
		type,
		name,
		created_at
	)
	values
	(
		{{SYSTEM_USER_ID}},
		{{USER_ENTITY_TYPE}},
		{{SYSTEM_USER_NAME}},
		{{DATE_MILLIS}}
	)

repositoryDefinition.createPropertyTable:
	create table property
	(
	    id integer generated by default as identity (start with 1, increment by 1) not null,
	    entity_id bigint not null references entity(id) on delete cascade,
	    property_name varchar(64) not null,
	    index integer not null default -1,
	    entity_value bigint references entity(id) on delete cascade,
	    integer_value integer,
	    bigint_value bigint,
	    boolean_value boolean,
	    varchar_value varchar(256),
	    clob_value clob,
	    blob_value blob,
	    enum_value varchar(256),
	    utc_millis_value bigint,
	    valid_from bigint,
	    valid_to bigint,
	    modified_by bigint references entity(id) on delete cascade,
	    primary key(id),
	    unique(entity_id, property_name, index, valid_to)
	)
	
repositoryDefinition.createAuthorityTable:
	create table authority
	(
	    id integer generated by default as identity (start with 1, increment by 1) not null,
	    workflow_id bigint not null references entity(id) on delete cascade,
	    content_id bigint not null references entity(id) on delete cascade,
	    granted_to_id bigint not null references entity(id) on delete cascade,
	    granted_to_type smallint not null,
	    access_type smallint not null,
	    primary key(id)
	)
	
repositoryDefinition.createDateFunction:
	create function d
        ( value bigint )
        returns varchar(22)
        language java
        deterministic
        external name 'com.semanticexpression.connector.server.DerbyUtils.d'
        parameter style java
        no sql
        returns null on null input

repositoryDefinition.createFromHexFunction:
	create function fh
        ( buf varchar(19) )
        returns bigint
        language java
        deterministic
        external name 'com.semanticexpression.connector.server.DerbyUtils.fh'
        parameter style java
        no sql
        returns null on null input

repositoryDefinition.createToHexFunction:
	create function th
        ( value bigint )
        returns varchar(19)
        language java
        deterministic
        external name 'com.semanticexpression.connector.server.DerbyUtils.th'
        parameter style java
        no sql
        returns null on null input

repositoryDefinition.createReplaceAllFunction:
	create function ra
        ( string varchar(1000) , regular_expression varchar(1000), replacement varchar(1000) )
        returns varchar(1000)
        language java
        deterministic
        external name 'com.semanticexpression.connector.server.DerbyUtils.ra'
        parameter style java
        no sql
        returns null on null input

repositoryDefinition.createEntityView:
	create view ev 
	as
	select
	  th(id) as id,
	  type,
	  name,
	  th(parent_entity_id) as parent_entity_id,
	  th(created_by) as created_by,
	  d(created_at) as created_at,
	  d(published_at) as published_at
	from entity

repositoryDefinition.createPropertyView:
	create view pv
	as
	select
	  th(entity_id) as entity_id,
	  substr(property_name, 1, 32) as property_name,
	  index,
	  coalesce
	  (
	  	th(entity_value),
		char(integer_value),
		char(bigint_value),
		char(boolean_value),
		substr(ra(varchar_value, '\s+', ' '), 1, 32),
		char(utc_millis_value),
		substr(enum_value, 1, 32)
	  ) as value,
	  d(valid_from) as valid_from_date,
	  d(valid_to) as valid_to_date,
	  th(modified_by) as modified_by
	from property
	order by valid_from, entity_id, property_name, index

repositoryDefinition.createAuthorityView:
	create view av
	as
	select
	  th(workflow_id) as workflow_id,
	  th(content_id) as content_id,
	  th(granted_to_id) as granted_to_id,
	  granted_to_type,
	  access_type
	from authority

